/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : MainScreenStateMachine.sm
 */

package com.acproma.kflightchecklists.screens;

import com.acproma.kflightchecklists.utils.KfclStateMachine;
import java.io.PrintStream;

public class MainScreenStateMachine
    extends KfclStateMachine
{
//---------------------------------------------------------------
// Member methods.
//

    public MainScreenStateMachine(MainScreen owner)
    {
        this (owner, MainScreenMap.Ready);
    }

    public MainScreenStateMachine(MainScreen owner, MainScreenState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    @Override
    public int getIdentityId()
    {
        return System.identityHashCode(_owner);
    }

    public void Acknowledged()
    {
        _transition = "Acknowledged";
        getState().Acknowledged(this);
        _transition = "";
        return;
    }

    public void BackPressed()
    {
        _transition = "BackPressed";
        getState().BackPressed(this);
        _transition = "";
        return;
    }

    public void CraftSelected()
    {
        _transition = "CraftSelected";
        getState().CraftSelected(this);
        _transition = "";
        return;
    }

    public void Done()
    {
        _transition = "Done";
        getState().Done(this);
        _transition = "";
        return;
    }

    public void InitializationComplete()
    {
        _transition = "InitializationComplete";
        getState().InitializationComplete(this);
        _transition = "";
        return;
    }

    public void InitializationFailed()
    {
        _transition = "InitializationFailed";
        getState().InitializationFailed(this);
        _transition = "";
        return;
    }

    public void LoadCompleted()
    {
        _transition = "LoadCompleted";
        getState().LoadCompleted(this);
        _transition = "";
        return;
    }

    public void LoadFailed()
    {
        _transition = "LoadFailed";
        getState().LoadFailed(this);
        _transition = "";
        return;
    }

    public void OnActivityResult()
    {
        _transition = "OnActivityResult";
        getState().OnActivityResult(this);
        _transition = "";
        return;
    }

    public void OnResume()
    {
        _transition = "OnResume";
        getState().OnResume(this);
        _transition = "";
        return;
    }

    public void ReloadAssets()
    {
        _transition = "ReloadAssets";
        getState().ReloadAssets(this);
        _transition = "";
        return;
    }

    public MainScreenState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((MainScreenState) _state);
    }

    protected MainScreen getOwner()
    {
        return (_owner);
    }

    public void setOwner(MainScreen owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private MainScreen _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class MainScreenState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected MainScreenState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(MainScreenStateMachine context) {}
        protected void exit(MainScreenStateMachine context) {}

        protected void Acknowledged(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void BackPressed(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void CraftSelected(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void Done(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void InitializationComplete(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void InitializationFailed(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void LoadCompleted(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void LoadFailed(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void OnActivityResult(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void OnResume(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void ReloadAssets(MainScreenStateMachine context)
        {
            Default(context);
        }

        protected void Default(MainScreenStateMachine context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "[" + System.identityHashCode(context._owner)  + "]TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class MainScreenMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final MainScreenMap_Ready Ready =
            new MainScreenMap_Ready("MainScreenMap.Ready", 0);
        public static final MainScreenMap_InitializingApp InitializingApp =
            new MainScreenMap_InitializingApp("MainScreenMap.InitializingApp", 1);
        public static final MainScreenMap_LoadingCrafts LoadingCrafts =
            new MainScreenMap_LoadingCrafts("MainScreenMap.LoadingCrafts", 2);
        public static final MainScreenMap_ShowingDisclaimer ShowingDisclaimer =
            new MainScreenMap_ShowingDisclaimer("MainScreenMap.ShowingDisclaimer", 3);
        public static final MainScreenMap_ClosingApp ClosingApp =
            new MainScreenMap_ClosingApp("MainScreenMap.ClosingApp", 4);
        public static final MainScreenMap_ShowingCraftList ShowingCraftList =
            new MainScreenMap_ShowingCraftList("MainScreenMap.ShowingCraftList", 5);
        public static final MainScreenMap_ReloadingAssets ReloadingAssets =
            new MainScreenMap_ReloadingAssets("MainScreenMap.ReloadingAssets", 6);
        public static final MainScreenMap_ShowingChecklistSelectionScreen ShowingChecklistSelectionScreen =
            new MainScreenMap_ShowingChecklistSelectionScreen("MainScreenMap.ShowingChecklistSelectionScreen", 7);
        public static final MainScreenMap_ShowingInitializationFailed ShowingInitializationFailed =
            new MainScreenMap_ShowingInitializationFailed("MainScreenMap.ShowingInitializationFailed", 8);
        public static final MainScreenMap_ShowingCraftsLoadFailed ShowingCraftsLoadFailed =
            new MainScreenMap_ShowingCraftsLoadFailed("MainScreenMap.ShowingCraftsLoadFailed", 9);
    }

    protected static class MainScreenMap_Default
        extends MainScreenState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected MainScreenMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_Ready
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_Ready(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.Ready");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.Ready.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.Ready.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnResume(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.Ready");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.Ready.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.Ready.OnResume()");
            }

            context.setState(MainScreenMap.InitializingApp);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_InitializingApp
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_InitializingApp(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MainScreenStateMachine context)
            {
                MainScreen ctxt = context.getOwner();

            ctxt.smInitializeApp();
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.InitializingApp");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.InitializingApp.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.InitializingApp.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void InitializationComplete(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.InitializingApp");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.InitializingApp.InitializationComplete()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.InitializingApp.InitializationComplete()");
            }

            context.setState(MainScreenMap.LoadingCrafts);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void InitializationFailed(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.InitializingApp");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.InitializingApp.InitializationFailed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.InitializingApp.InitializationFailed()");
            }

            context.setState(MainScreenMap.ShowingInitializationFailed);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_LoadingCrafts
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_LoadingCrafts(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MainScreenStateMachine context)
            {
                MainScreen ctxt = context.getOwner();

            ctxt.smLoadCrafts();
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.LoadingCrafts");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.LoadingCrafts.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.LoadingCrafts.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void LoadCompleted(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.LoadingCrafts");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.LoadingCrafts.LoadCompleted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.LoadingCrafts.LoadCompleted()");
            }

            context.setState(MainScreenMap.ShowingDisclaimer);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void LoadFailed(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.LoadingCrafts");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.LoadingCrafts.LoadFailed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.LoadingCrafts.LoadFailed()");
            }

            context.setState(MainScreenMap.ShowingCraftsLoadFailed);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_ShowingDisclaimer
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_ShowingDisclaimer(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MainScreenStateMachine context)
            {
                MainScreen ctxt = context.getOwner();

            ctxt.smShowDisclaimer();
            return;
        }

        @Override
        protected void Acknowledged(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingDisclaimer");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingDisclaimer.Acknowledged()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingDisclaimer.Acknowledged()");
            }

            context.setState(MainScreenMap.ShowingCraftList);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingDisclaimer");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingDisclaimer.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingDisclaimer.Default()");
                }

                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_ClosingApp
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_ClosingApp(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MainScreenStateMachine context)
            {
                MainScreen ctxt = context.getOwner();

            ctxt.smCloseApp();
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ClosingApp");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ClosingApp.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ClosingApp.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Done(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ClosingApp");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ClosingApp.Done()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ClosingApp.Done()");
            }

            context.setState(MainScreenMap.Ready);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_ShowingCraftList
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_ShowingCraftList(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void BackPressed(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingCraftList");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingCraftList.BackPressed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingCraftList.BackPressed()");
            }

            context.setState(MainScreenMap.ClosingApp);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void CraftSelected(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingCraftList");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingCraftList.CraftSelected()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingCraftList.CraftSelected()");
            }

            context.setState(MainScreenMap.ShowingChecklistSelectionScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingCraftList");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingCraftList.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingCraftList.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnActivityResult(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingCraftList");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingCraftList.OnActivityResult()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingCraftList.OnActivityResult()");
            }

            context.setState(MainScreenMap.ShowingCraftList);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void OnResume(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingCraftList");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingCraftList.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingCraftList.OnResume()");
            }

            context.setState(MainScreenMap.LoadingCrafts);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void ReloadAssets(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingCraftList");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingCraftList.ReloadAssets()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingCraftList.ReloadAssets()");
            }

            context.setState(MainScreenMap.ReloadingAssets);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_ReloadingAssets
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_ReloadingAssets(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MainScreenStateMachine context)
            {
                MainScreen ctxt = context.getOwner();

            ctxt.smReloadAssets();
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ReloadingAssets");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ReloadingAssets.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ReloadingAssets.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void InitializationComplete(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ReloadingAssets");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ReloadingAssets.InitializationComplete()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ReloadingAssets.InitializationComplete()");
            }

            context.setState(MainScreenMap.LoadingCrafts);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void InitializationFailed(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ReloadingAssets");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ReloadingAssets.InitializationFailed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ReloadingAssets.InitializationFailed()");
            }

            context.setState(MainScreenMap.ShowingInitializationFailed);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_ShowingChecklistSelectionScreen
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_ShowingChecklistSelectionScreen(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MainScreenStateMachine context)
            {
                MainScreen ctxt = context.getOwner();

            ctxt.smShowChecklistSelectScreen();
            return;
        }

        @Override
        protected void BackPressed(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingChecklistSelectionScreen");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingChecklistSelectionScreen.BackPressed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingChecklistSelectionScreen.BackPressed()");
            }

            context.setState(MainScreenMap.ClosingApp);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingChecklistSelectionScreen");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingChecklistSelectionScreen.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingChecklistSelectionScreen.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnActivityResult(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingChecklistSelectionScreen");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingChecklistSelectionScreen.OnActivityResult()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingChecklistSelectionScreen.OnActivityResult()");
            }

            context.setState(MainScreenMap.ShowingCraftList);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_ShowingInitializationFailed
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_ShowingInitializationFailed(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MainScreenStateMachine context)
            {
                MainScreen ctxt = context.getOwner();

            ctxt.smShowInitializationFailed();
            return;
        }

        @Override
        protected void Acknowledged(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingInitializationFailed");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingInitializationFailed.Acknowledged()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingInitializationFailed.Acknowledged()");
            }

            context.setState(MainScreenMap.ClosingApp);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingInitializationFailed");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingInitializationFailed.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingInitializationFailed.Default()");
                }

                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainScreenMap_ShowingCraftsLoadFailed
        extends MainScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainScreenMap_ShowingCraftsLoadFailed(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(MainScreenStateMachine context)
            {
                MainScreen ctxt = context.getOwner();

            ctxt.smLoadCraftsFailed();
            return;
        }

        @Override
        protected void Acknowledged(MainScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingCraftsLoadFailed");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingCraftsLoadFailed.Acknowledged()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingCraftsLoadFailed.Acknowledged()");
            }

            context.setState(MainScreenMap.ClosingApp);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(MainScreenStateMachine context)
        {
            MainScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : MainScreenMap.ShowingCraftsLoadFailed");
            }
            MainScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: MainScreenMap.ShowingCraftsLoadFailed.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : MainScreenMap.ShowingCraftsLoadFailed.Default()");
                }

                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
