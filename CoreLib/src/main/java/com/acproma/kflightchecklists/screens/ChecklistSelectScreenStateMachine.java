/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : ChecklistSelectScreenStateMachine.sm
 */

package com.acproma.kflightchecklists.screens;

import com.acproma.kflightchecklists.utils.KfclStateMachine;
import java.io.PrintStream;

public class ChecklistSelectScreenStateMachine
    extends KfclStateMachine
{
//---------------------------------------------------------------
// Member methods.
//

    public ChecklistSelectScreenStateMachine(ChecklistSelectScreen owner)
    {
        this (owner, ChecklistScreenMap.Ready);
    }

    public ChecklistSelectScreenStateMachine(ChecklistSelectScreen owner, ChecklistSelectScreenState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    @Override
    public int getIdentityId()
    {
        return System.identityHashCode(_owner);
    }

    public void Acknowledged()
    {
        _transition = "Acknowledged";
        getState().Acknowledged(this);
        _transition = "";
        return;
    }

    public void AdClosed()
    {
        _transition = "AdClosed";
        getState().AdClosed(this);
        _transition = "";
        return;
    }

    public void AdNotLoaded()
    {
        _transition = "AdNotLoaded";
        getState().AdNotLoaded(this);
        _transition = "";
        return;
    }

    public void BackPressed()
    {
        _transition = "BackPressed";
        getState().BackPressed(this);
        _transition = "";
        return;
    }

    public void ChecklistSelected()
    {
        _transition = "ChecklistSelected";
        getState().ChecklistSelected(this);
        _transition = "";
        return;
    }

    public void Done()
    {
        _transition = "Done";
        getState().Done(this);
        _transition = "";
        return;
    }

    public void IntentParametersExtracted()
    {
        _transition = "IntentParametersExtracted";
        getState().IntentParametersExtracted(this);
        _transition = "";
        return;
    }

    public void LoadCompleted()
    {
        _transition = "LoadCompleted";
        getState().LoadCompleted(this);
        _transition = "";
        return;
    }

    public void LoadFailed()
    {
        _transition = "LoadFailed";
        getState().LoadFailed(this);
        _transition = "";
        return;
    }

    public void MissingIntentParameters()
    {
        _transition = "MissingIntentParameters";
        getState().MissingIntentParameters(this);
        _transition = "";
        return;
    }

    public void OnActivityResult()
    {
        _transition = "OnActivityResult";
        getState().OnActivityResult(this);
        _transition = "";
        return;
    }

    public void OnResume()
    {
        _transition = "OnResume";
        getState().OnResume(this);
        _transition = "";
        return;
    }

    public ChecklistSelectScreenState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((ChecklistSelectScreenState) _state);
    }

    protected ChecklistSelectScreen getOwner()
    {
        return (_owner);
    }

    public void setOwner(ChecklistSelectScreen owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private ChecklistSelectScreen _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class ChecklistSelectScreenState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ChecklistSelectScreenState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(ChecklistSelectScreenStateMachine context) {}
        protected void exit(ChecklistSelectScreenStateMachine context) {}

        protected void Acknowledged(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void AdClosed(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void AdNotLoaded(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void BackPressed(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void ChecklistSelected(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void Done(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void IntentParametersExtracted(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void LoadCompleted(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void LoadFailed(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void MissingIntentParameters(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void OnActivityResult(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void OnResume(ChecklistSelectScreenStateMachine context)
        {
            Default(context);
        }

        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "[" + System.identityHashCode(context._owner)  + "]TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class ChecklistScreenMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final ChecklistScreenMap_Ready Ready =
            new ChecklistScreenMap_Ready("ChecklistScreenMap.Ready", 0);
        public static final ChecklistScreenMap_ExtractingIntentParameters ExtractingIntentParameters =
            new ChecklistScreenMap_ExtractingIntentParameters("ChecklistScreenMap.ExtractingIntentParameters", 1);
        public static final ChecklistScreenMap_ShowingMissingIntentParameters ShowingMissingIntentParameters =
            new ChecklistScreenMap_ShowingMissingIntentParameters("ChecklistScreenMap.ShowingMissingIntentParameters", 2);
        public static final ChecklistScreenMap_CloseScreen CloseScreen =
            new ChecklistScreenMap_CloseScreen("ChecklistScreenMap.CloseScreen", 3);
        public static final ChecklistScreenMap_LoadingChecklists LoadingChecklists =
            new ChecklistScreenMap_LoadingChecklists("ChecklistScreenMap.LoadingChecklists", 4);
        public static final ChecklistScreenMap_ShowingChecklistsLoadFailed ShowingChecklistsLoadFailed =
            new ChecklistScreenMap_ShowingChecklistsLoadFailed("ChecklistScreenMap.ShowingChecklistsLoadFailed", 5);
        public static final ChecklistScreenMap_ShowingChecklists ShowingChecklists =
            new ChecklistScreenMap_ShowingChecklists("ChecklistScreenMap.ShowingChecklists", 6);
        public static final ChecklistScreenMap_DisplayingInterstitialAd DisplayingInterstitialAd =
            new ChecklistScreenMap_DisplayingInterstitialAd("ChecklistScreenMap.DisplayingInterstitialAd", 7);
        public static final ChecklistScreenMap_ShowingChecklistRundownScreen ShowingChecklistRundownScreen =
            new ChecklistScreenMap_ShowingChecklistRundownScreen("ChecklistScreenMap.ShowingChecklistRundownScreen", 8);
    }

    protected static class ChecklistScreenMap_Default
        extends ChecklistSelectScreenState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ChecklistScreenMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_Ready
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_Ready(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.Ready");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.Ready.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.Ready.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnResume(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.Ready");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.Ready.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.Ready.OnResume()");
            }

            context.setState(ChecklistScreenMap.ExtractingIntentParameters);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_ExtractingIntentParameters
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_ExtractingIntentParameters(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistSelectScreenStateMachine context)
            {
                ChecklistSelectScreen ctxt = context.getOwner();

            ctxt.smExtractIntentParameters();
            return;
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ExtractingIntentParameters");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ExtractingIntentParameters.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ExtractingIntentParameters.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void IntentParametersExtracted(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ExtractingIntentParameters");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ExtractingIntentParameters.IntentParametersExtracted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ExtractingIntentParameters.IntentParametersExtracted()");
            }

            context.setState(ChecklistScreenMap.LoadingChecklists);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void MissingIntentParameters(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ExtractingIntentParameters");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ExtractingIntentParameters.MissingIntentParameters()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ExtractingIntentParameters.MissingIntentParameters()");
            }

            context.setState(ChecklistScreenMap.ShowingMissingIntentParameters);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_ShowingMissingIntentParameters
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_ShowingMissingIntentParameters(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistSelectScreenStateMachine context)
            {
                ChecklistSelectScreen ctxt = context.getOwner();

            ctxt.smShowMissingIntentParameters();
            return;
        }

        @Override
        protected void Acknowledged(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingMissingIntentParameters");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingMissingIntentParameters.Acknowledged()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingMissingIntentParameters.Acknowledged()");
            }

            context.setState(ChecklistScreenMap.CloseScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingMissingIntentParameters");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingMissingIntentParameters.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingMissingIntentParameters.Default()");
                }

                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_CloseScreen
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_CloseScreen(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistSelectScreenStateMachine context)
            {
                ChecklistSelectScreen ctxt = context.getOwner();

            ctxt.smCloseScreen();
            ctxt.smTransitionDone();
            return;
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.CloseScreen");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.CloseScreen.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.CloseScreen.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Done(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.CloseScreen");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.CloseScreen.Done()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.CloseScreen.Done()");
            }

            context.setState(ChecklistScreenMap.Ready);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_LoadingChecklists
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_LoadingChecklists(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistSelectScreenStateMachine context)
            {
                ChecklistSelectScreen ctxt = context.getOwner();

            ctxt.smLoadChecklists();
            return;
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.LoadingChecklists");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.LoadingChecklists.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.LoadingChecklists.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void LoadCompleted(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.LoadingChecklists");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.LoadingChecklists.LoadCompleted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.LoadingChecklists.LoadCompleted()");
            }

            context.setState(ChecklistScreenMap.ShowingChecklists);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void LoadFailed(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.LoadingChecklists");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.LoadingChecklists.LoadFailed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.LoadingChecklists.LoadFailed()");
            }

            context.setState(ChecklistScreenMap.ShowingChecklistsLoadFailed);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_ShowingChecklistsLoadFailed
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_ShowingChecklistsLoadFailed(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistSelectScreenStateMachine context)
            {
                ChecklistSelectScreen ctxt = context.getOwner();

            ctxt.smShowChecklistsLoadFailed();
            return;
        }

        @Override
        protected void Acknowledged(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklistsLoadFailed");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklistsLoadFailed.Acknowledged()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklistsLoadFailed.Acknowledged()");
            }

            context.setState(ChecklistScreenMap.CloseScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklistsLoadFailed");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklistsLoadFailed.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklistsLoadFailed.Default()");
                }

                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_ShowingChecklists
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_ShowingChecklists(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void BackPressed(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklists");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklists.BackPressed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklists.BackPressed()");
            }

            context.setState(ChecklistScreenMap.CloseScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void ChecklistSelected(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklists");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklists.ChecklistSelected()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklists.ChecklistSelected()");
            }

            context.setState(ChecklistScreenMap.DisplayingInterstitialAd);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklists");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklists.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklists.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnResume(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklists");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklists.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklists.OnResume()");
            }

            context.setState(ChecklistScreenMap.LoadingChecklists);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_DisplayingInterstitialAd
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_DisplayingInterstitialAd(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistSelectScreenStateMachine context)
            {
                ChecklistSelectScreen ctxt = context.getOwner();

            ctxt.smDisplayInterstitialAd();
            return;
        }

        @Override
        protected void AdClosed(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.DisplayingInterstitialAd");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.DisplayingInterstitialAd.AdClosed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.DisplayingInterstitialAd.AdClosed()");
            }

            context.setState(ChecklistScreenMap.ShowingChecklistRundownScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void AdNotLoaded(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.DisplayingInterstitialAd");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.DisplayingInterstitialAd.AdNotLoaded()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.DisplayingInterstitialAd.AdNotLoaded()");
            }

            context.setState(ChecklistScreenMap.ShowingChecklistRundownScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void ChecklistSelected(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.DisplayingInterstitialAd");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.DisplayingInterstitialAd.ChecklistSelected()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.DisplayingInterstitialAd.ChecklistSelected()");
            }

            context.setState(ChecklistScreenMap.DisplayingInterstitialAd);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.DisplayingInterstitialAd");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.DisplayingInterstitialAd.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.DisplayingInterstitialAd.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnResume(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.DisplayingInterstitialAd");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.DisplayingInterstitialAd.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.DisplayingInterstitialAd.OnResume()");
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistScreenMap_ShowingChecklistRundownScreen
        extends ChecklistScreenMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistScreenMap_ShowingChecklistRundownScreen(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistSelectScreenStateMachine context)
            {
                ChecklistSelectScreen ctxt = context.getOwner();

            ctxt.smShowChecklistRundownScreen();
            return;
        }

        @Override
        protected void BackPressed(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklistRundownScreen");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklistRundownScreen.BackPressed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklistRundownScreen.BackPressed()");
            }

            context.setState(ChecklistScreenMap.CloseScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistSelectScreenStateMachine context)
        {
            ChecklistSelectScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklistRundownScreen");
            }
            ChecklistSelectScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklistRundownScreen.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklistRundownScreen.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnActivityResult(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklistRundownScreen");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklistRundownScreen.OnActivityResult()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklistRundownScreen.OnActivityResult()");
            }

            context.setState(ChecklistScreenMap.ShowingChecklists);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void OnResume(ChecklistSelectScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistScreenMap.ShowingChecklistRundownScreen");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistScreenMap.ShowingChecklistRundownScreen.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistScreenMap.ShowingChecklistRundownScreen.OnResume()");
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
