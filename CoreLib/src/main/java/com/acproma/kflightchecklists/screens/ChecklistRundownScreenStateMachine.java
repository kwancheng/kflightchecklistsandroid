/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : ChecklistRundownScreenStateMachine.sm
 */

package com.acproma.kflightchecklists.screens;

import com.acproma.kflightchecklists.utils.KfclStateMachine;
import java.io.PrintStream;

public class ChecklistRundownScreenStateMachine
    extends KfclStateMachine
{
//---------------------------------------------------------------
// Member methods.
//

    public ChecklistRundownScreenStateMachine(ChecklistRundownScreen owner)
    {
        this (owner, ChecklistRunDownMap.Ready);
    }

    public ChecklistRundownScreenStateMachine(ChecklistRundownScreen owner, ChecklistRundownScreenState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    @Override
    public int getIdentityId()
    {
        return System.identityHashCode(_owner);
    }

    public void Acknowledged()
    {
        _transition = "Acknowledged";
        getState().Acknowledged(this);
        _transition = "";
        return;
    }

    public void ActionCompleted()
    {
        _transition = "ActionCompleted";
        getState().ActionCompleted(this);
        _transition = "";
        return;
    }

    public void ActionItemAdvanced()
    {
        _transition = "ActionItemAdvanced";
        getState().ActionItemAdvanced(this);
        _transition = "";
        return;
    }

    public void AdvanceSection()
    {
        _transition = "AdvanceSection";
        getState().AdvanceSection(this);
        _transition = "";
        return;
    }

    public void BackPressed()
    {
        _transition = "BackPressed";
        getState().BackPressed(this);
        _transition = "";
        return;
    }

    public void Done()
    {
        _transition = "Done";
        getState().Done(this);
        _transition = "";
        return;
    }

    public void EndOfList()
    {
        _transition = "EndOfList";
        getState().EndOfList(this);
        _transition = "";
        return;
    }

    public void ExtractIntentParametersFailed()
    {
        _transition = "ExtractIntentParametersFailed";
        getState().ExtractIntentParametersFailed(this);
        _transition = "";
        return;
    }

    public void IntentParametersExtracted()
    {
        _transition = "IntentParametersExtracted";
        getState().IntentParametersExtracted(this);
        _transition = "";
        return;
    }

    public void LoadCompleted()
    {
        _transition = "LoadCompleted";
        getState().LoadCompleted(this);
        _transition = "";
        return;
    }

    public void LoadFailed()
    {
        _transition = "LoadFailed";
        getState().LoadFailed(this);
        _transition = "";
        return;
    }

    public void OnPause()
    {
        _transition = "OnPause";
        getState().OnPause(this);
        _transition = "";
        return;
    }

    public void OnResume()
    {
        _transition = "OnResume";
        getState().OnResume(this);
        _transition = "";
        return;
    }

    public void RecordNote()
    {
        _transition = "RecordNote";
        getState().RecordNote(this);
        _transition = "";
        return;
    }

    public void ResetPosition()
    {
        _transition = "ResetPosition";
        getState().ResetPosition(this);
        _transition = "";
        return;
    }

    public void SectionSelected()
    {
        _transition = "SectionSelected";
        getState().SectionSelected(this);
        _transition = "";
        return;
    }

    public void ShowImage()
    {
        _transition = "ShowImage";
        getState().ShowImage(this);
        _transition = "";
        return;
    }

    public void ShowTimer()
    {
        _transition = "ShowTimer";
        getState().ShowTimer(this);
        _transition = "";
        return;
    }

    public void TimerExpired()
    {
        _transition = "TimerExpired";
        getState().TimerExpired(this);
        _transition = "";
        return;
    }

    public void ToggleLight()
    {
        _transition = "ToggleLight";
        getState().ToggleLight(this);
        _transition = "";
        return;
    }

    public ChecklistRundownScreenState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((ChecklistRundownScreenState) _state);
    }

    protected ChecklistRundownScreen getOwner()
    {
        return (_owner);
    }

    public void setOwner(ChecklistRundownScreen owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private ChecklistRundownScreen _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class ChecklistRundownScreenState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ChecklistRundownScreenState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(ChecklistRundownScreenStateMachine context) {}
        protected void exit(ChecklistRundownScreenStateMachine context) {}

        protected void Acknowledged(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void ActionCompleted(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void ActionItemAdvanced(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void AdvanceSection(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void BackPressed(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void Done(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void EndOfList(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void ExtractIntentParametersFailed(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void IntentParametersExtracted(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void LoadCompleted(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void LoadFailed(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void OnPause(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void OnResume(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void RecordNote(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void ResetPosition(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void SectionSelected(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void ShowImage(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void ShowTimer(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void TimerExpired(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void ToggleLight(ChecklistRundownScreenStateMachine context)
        {
            Default(context);
        }

        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            if (context.getDebugFlag() == true)
            {
                PrintStream str = 
                    context.getDebugStream();

                str.println(
                    "[" + System.identityHashCode(context._owner)  + "]TRANSITION   : Default");
            }

            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class ChecklistRunDownMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final ChecklistRunDownMap_Ready Ready =
            new ChecklistRunDownMap_Ready("ChecklistRunDownMap.Ready", 0);
        public static final ChecklistRunDownMap_ExtractingIntentParameters ExtractingIntentParameters =
            new ChecklistRunDownMap_ExtractingIntentParameters("ChecklistRunDownMap.ExtractingIntentParameters", 1);
        public static final ChecklistRunDownMap_LoadingChecklist LoadingChecklist =
            new ChecklistRunDownMap_LoadingChecklist("ChecklistRunDownMap.LoadingChecklist", 2);
        public static final ChecklistRunDownMap_LoadingCurrentSection LoadingCurrentSection =
            new ChecklistRunDownMap_LoadingCurrentSection("ChecklistRunDownMap.LoadingCurrentSection", 3);
        public static final ChecklistRunDownMap_PerformingEntryAction PerformingEntryAction =
            new ChecklistRunDownMap_PerformingEntryAction("ChecklistRunDownMap.PerformingEntryAction", 4);
        public static final ChecklistRunDownMap_PerformingExitAction PerformingExitAction =
            new ChecklistRunDownMap_PerformingExitAction("ChecklistRunDownMap.PerformingExitAction", 5);
        public static final ChecklistRunDownMap_ShowingActionItem ShowingActionItem =
            new ChecklistRunDownMap_ShowingActionItem("ChecklistRunDownMap.ShowingActionItem", 6);
        public static final ChecklistRunDownMap_ClosingScreen ClosingScreen =
            new ChecklistRunDownMap_ClosingScreen("ChecklistRunDownMap.ClosingScreen", 7);
        public static final ChecklistRunDownMap_ShowingExtractIntentParametersFailed ShowingExtractIntentParametersFailed =
            new ChecklistRunDownMap_ShowingExtractIntentParametersFailed("ChecklistRunDownMap.ShowingExtractIntentParametersFailed", 8);
        public static final ChecklistRunDownMap_ShowingChecklistLoadFailed ShowingChecklistLoadFailed =
            new ChecklistRunDownMap_ShowingChecklistLoadFailed("ChecklistRunDownMap.ShowingChecklistLoadFailed", 9);
        public static final ChecklistRunDownMap_ShowingTimer ShowingTimer =
            new ChecklistRunDownMap_ShowingTimer("ChecklistRunDownMap.ShowingTimer", 10);
        public static final ChecklistRunDownMap_ShowingActionItemImage ShowingActionItemImage =
            new ChecklistRunDownMap_ShowingActionItemImage("ChecklistRunDownMap.ShowingActionItemImage", 11);
        public static final ChecklistRunDownMap_PausingActionItemImage PausingActionItemImage =
            new ChecklistRunDownMap_PausingActionItemImage("ChecklistRunDownMap.PausingActionItemImage", 12);
        public static final ChecklistRunDownMap_HidingActionItemImage HidingActionItemImage =
            new ChecklistRunDownMap_HidingActionItemImage("ChecklistRunDownMap.HidingActionItemImage", 13);
        public static final ChecklistRunDownMap_RecordingNote RecordingNote =
            new ChecklistRunDownMap_RecordingNote("ChecklistRunDownMap.RecordingNote", 14);
        public static final ChecklistRunDownMap_TogglingLight TogglingLight =
            new ChecklistRunDownMap_TogglingLight("ChecklistRunDownMap.TogglingLight", 15);
        public static final ChecklistRunDownMap_AdvancingActionItem AdvancingActionItem =
            new ChecklistRunDownMap_AdvancingActionItem("ChecklistRunDownMap.AdvancingActionItem", 16);
        public static final ChecklistRunDownMap_AdvancingSection AdvancingSection =
            new ChecklistRunDownMap_AdvancingSection("ChecklistRunDownMap.AdvancingSection", 17);
    }

    protected static class ChecklistRunDownMap_Default
        extends ChecklistRundownScreenState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected ChecklistRunDownMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_Ready
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_Ready(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.Ready");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.Ready.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.Ready.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnResume(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.Ready");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.Ready.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.Ready.OnResume()");
            }

            context.setState(ChecklistRunDownMap.ExtractingIntentParameters);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_ExtractingIntentParameters
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_ExtractingIntentParameters(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smExtractIntentParameters();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ExtractingIntentParameters");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ExtractingIntentParameters.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ExtractingIntentParameters.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void ExtractIntentParametersFailed(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ExtractingIntentParameters");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ExtractingIntentParameters.ExtractIntentParametersFailed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ExtractingIntentParameters.ExtractIntentParametersFailed()");
            }

            context.setState(ChecklistRunDownMap.ShowingExtractIntentParametersFailed);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void IntentParametersExtracted(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ExtractingIntentParameters");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ExtractingIntentParameters.IntentParametersExtracted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ExtractingIntentParameters.IntentParametersExtracted()");
            }

            context.setState(ChecklistRunDownMap.LoadingChecklist);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_LoadingChecklist
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_LoadingChecklist(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smLoadChecklist();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.LoadingChecklist");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.LoadingChecklist.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.LoadingChecklist.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void LoadCompleted(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.LoadingChecklist");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.LoadingChecklist.LoadCompleted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.LoadingChecklist.LoadCompleted()");
            }

            context.setState(ChecklistRunDownMap.LoadingCurrentSection);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void LoadFailed(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.LoadingChecklist");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.LoadingChecklist.LoadFailed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.LoadingChecklist.LoadFailed()");
            }

            context.setState(ChecklistRunDownMap.ShowingChecklistLoadFailed);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_LoadingCurrentSection
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_LoadingCurrentSection(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smLoadCurrentSection();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.LoadingCurrentSection");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.LoadingCurrentSection.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.LoadingCurrentSection.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void LoadCompleted(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.LoadingCurrentSection");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.LoadingCurrentSection.LoadCompleted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.LoadingCurrentSection.LoadCompleted()");
            }

            context.setState(ChecklistRunDownMap.PerformingEntryAction);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_PerformingEntryAction
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_PerformingEntryAction(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smPerformEntryAction();
            return;
        }

        @Override
        protected void ActionCompleted(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PerformingEntryAction");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PerformingEntryAction.ActionCompleted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PerformingEntryAction.ActionCompleted()");
            }

            context.setState(ChecklistRunDownMap.ShowingActionItem);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PerformingEntryAction");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PerformingEntryAction.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PerformingEntryAction.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void ShowTimer(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PerformingEntryAction");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PerformingEntryAction.ShowTimer()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PerformingEntryAction.ShowTimer()");
            }

            context.pushState(ChecklistRunDownMap.ShowingTimer);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void TimerExpired(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PerformingEntryAction");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PerformingEntryAction.TimerExpired()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PerformingEntryAction.TimerExpired()");
            }

            context.setState(ChecklistRunDownMap.ShowingActionItem);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_PerformingExitAction
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_PerformingExitAction(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smPerformExitAction();
            return;
        }

        @Override
        protected void ActionCompleted(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PerformingExitAction");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PerformingExitAction.ActionCompleted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PerformingExitAction.ActionCompleted()");
            }

            context.setState(ChecklistRunDownMap.AdvancingActionItem);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PerformingExitAction");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PerformingExitAction.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PerformingExitAction.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void ShowTimer(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PerformingExitAction");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PerformingExitAction.ShowTimer()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PerformingExitAction.ShowTimer()");
            }

            context.pushState(ChecklistRunDownMap.ShowingTimer);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void TimerExpired(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PerformingExitAction");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PerformingExitAction.TimerExpired()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PerformingExitAction.TimerExpired()");
            }

            context.setState(ChecklistRunDownMap.AdvancingActionItem);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_ShowingActionItem
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_ShowingActionItem(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smShowActionItem();
            return;
        }

        @Override
        protected void ActionCompleted(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.ActionCompleted()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.ActionCompleted()");
            }

            context.setState(ChecklistRunDownMap.PerformingExitAction);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void BackPressed(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.BackPressed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.BackPressed()");
            }

            context.setState(ChecklistRunDownMap.ClosingScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnResume(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.OnResume()");
            }

            return;
        }

        @Override
        protected void RecordNote(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.RecordNote()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.RecordNote()");
            }

            context.pushState(ChecklistRunDownMap.RecordingNote);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void ResetPosition(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.ResetPosition()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.ResetPosition()");
            }

            context.setState(ChecklistRunDownMap.ShowingActionItem);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void SectionSelected(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.SectionSelected()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.SectionSelected()");
            }

            context.setState(ChecklistRunDownMap.LoadingCurrentSection);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void ShowImage(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.ShowImage()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.ShowImage()");
            }

            context.pushState(ChecklistRunDownMap.ShowingActionItemImage);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void ToggleLight(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItem");
            }
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItem.ToggleLight()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItem.ToggleLight()");
            }

            context.pushState(ChecklistRunDownMap.TogglingLight);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_ClosingScreen
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_ClosingScreen(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smCloseScreen();
            ctxt.smTransitionDone();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ClosingScreen");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ClosingScreen.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ClosingScreen.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Done(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ClosingScreen");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ClosingScreen.Done()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ClosingScreen.Done()");
            }

            context.setState(ChecklistRunDownMap.Ready);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_ShowingExtractIntentParametersFailed
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_ShowingExtractIntentParametersFailed(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smShowExtractIntentParametersFailed();
            return;
        }

        @Override
        protected void Acknowledged(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingExtractIntentParametersFailed");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingExtractIntentParametersFailed.Acknowledged()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingExtractIntentParametersFailed.Acknowledged()");
            }

            context.setState(ChecklistRunDownMap.ClosingScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingExtractIntentParametersFailed");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingExtractIntentParametersFailed.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingExtractIntentParametersFailed.Default()");
                }

                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_ShowingChecklistLoadFailed
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_ShowingChecklistLoadFailed(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smShowChecklistLoadFailed();
            return;
        }

        @Override
        protected void Acknowledged(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingChecklistLoadFailed");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingChecklistLoadFailed.Acknowledged()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingChecklistLoadFailed.Acknowledged()");
            }

            context.setState(ChecklistRunDownMap.ClosingScreen);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingChecklistLoadFailed");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingChecklistLoadFailed.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingChecklistLoadFailed.Default()");
                }

                context.setState(endState);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_ShowingTimer
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_ShowingTimer(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smShowTimer();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingTimer");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingTimer.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingTimer.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void TimerExpired(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingTimer");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingTimer.TimerExpired()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingTimer.TimerExpired()");
            }

            context.popState();

            context.TimerExpired();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_ShowingActionItemImage
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_ShowingActionItemImage(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smShowActionItemImage();
            return;
        }

        @Override
        protected void BackPressed(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItemImage");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItemImage.BackPressed()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItemImage.BackPressed()");
            }

            context.setState(ChecklistRunDownMap.HidingActionItemImage);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItemImage");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItemImage.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItemImage.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Done(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItemImage");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItemImage.Done()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItemImage.Done()");
            }

            context.popState();
            return;
        }

        @Override
        protected void OnPause(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.ShowingActionItemImage");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.ShowingActionItemImage.OnPause()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.ShowingActionItemImage.OnPause()");
            }

            context.setState(ChecklistRunDownMap.PausingActionItemImage);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_PausingActionItemImage
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_PausingActionItemImage(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smHideActionItemImage();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PausingActionItemImage");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PausingActionItemImage.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PausingActionItemImage.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void OnResume(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.PausingActionItemImage");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.PausingActionItemImage.OnResume()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.PausingActionItemImage.OnResume()");
            }

            context.setState(ChecklistRunDownMap.ShowingActionItemImage);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_HidingActionItemImage
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_HidingActionItemImage(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smHideActionItemImage();
            ctxt.smTransitionDone();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.HidingActionItemImage");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.HidingActionItemImage.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.HidingActionItemImage.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Done(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.HidingActionItemImage");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.HidingActionItemImage.Done()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.HidingActionItemImage.Done()");
            }

            context.popState();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_RecordingNote
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_RecordingNote(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smRecordNote();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.RecordingNote");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.RecordingNote.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.RecordingNote.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Done(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.RecordingNote");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.RecordingNote.Done()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.RecordingNote.Done()");
            }

            context.popState();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_TogglingLight
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_TogglingLight(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smToggleLight();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.TogglingLight");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.TogglingLight.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.TogglingLight.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void Done(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.TogglingLight");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.TogglingLight.Done()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.TogglingLight.Done()");
            }

            context.popState();
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_AdvancingActionItem
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_AdvancingActionItem(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smAdvanceActionItem();
            return;
        }

        @Override
        protected void ActionItemAdvanced(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.AdvancingActionItem");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.AdvancingActionItem.ActionItemAdvanced()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.AdvancingActionItem.ActionItemAdvanced()");
            }

            context.setState(ChecklistRunDownMap.PerformingEntryAction);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void AdvanceSection(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.AdvancingActionItem");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.AdvancingActionItem.AdvanceSection()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.AdvancingActionItem.AdvanceSection()");
            }

            context.setState(ChecklistRunDownMap.AdvancingSection);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.AdvancingActionItem");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.AdvancingActionItem.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.AdvancingActionItem.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void EndOfList(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.AdvancingActionItem");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.AdvancingActionItem.EndOfList()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.AdvancingActionItem.EndOfList()");
            }

            context.setState(ChecklistRunDownMap.ShowingActionItem);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class ChecklistRunDownMap_AdvancingSection
        extends ChecklistRunDownMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private ChecklistRunDownMap_AdvancingSection(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(ChecklistRundownScreenStateMachine context)
            {
                ChecklistRundownScreen ctxt = context.getOwner();

            ctxt.smAdvanceSection();
            return;
        }

        @Override
        protected void Default(ChecklistRundownScreenStateMachine context)
        {
            ChecklistRundownScreen ctxt = context.getOwner();

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.AdvancingSection");
            }
            ChecklistRundownScreenState endState = context.getState();
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.AdvancingSection.Default()");
            }

            context.clearState();
            try
            {
                ctxt.smReportUnknownTransition();
            }
            finally
            {
                if (context.getDebugFlag() == true)
                {
                    PrintStream str = context.getDebugStream();

                    str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.AdvancingSection.Default()");
                }

                context.setState(endState);
            }

            return;
        }

        @Override
        protected void EndOfList(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.AdvancingSection");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.AdvancingSection.EndOfList()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.AdvancingSection.EndOfList()");
            }

            context.setState(ChecklistRunDownMap.ShowingActionItem);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void SectionSelected(ChecklistRundownScreenStateMachine context)
        {

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]LEAVING STATE   : ChecklistRunDownMap.AdvancingSection");
            }
            (context.getState()).exit(context);
            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner) + "]ENTER TRANSITION: ChecklistRunDownMap.AdvancingSection.SectionSelected()");
            }

            if (context.getDebugFlag() == true)
            {
                PrintStream str = context.getDebugStream();

                str.println("[" + System.identityHashCode(context._owner)  + "]EXIT TRANSITION : ChecklistRunDownMap.AdvancingSection.SectionSelected()");
            }

            context.setState(ChecklistRunDownMap.LoadingCurrentSection);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
